name: Vanguard Deployment Workflow

on: push

jobs:
  Get-Package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download git (if needed)
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Download AEM package
        run: |
          curl -L https://mirrors.edge.kernel.org/pub/software/scm/git/git-0.6.tar.gz -o git-0.6.tar.gz

      - name: Verify Download (Optional)
        run: |
          echo "Downloaded file hash:"
          shasum -a 256 ${GITHUB_WORKSPACE}/git-0.6.tar.gz

  Upload-Package:
    runs-on: ubuntu-latest
    needs: Get-Package
    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load environment variables from .github/environments.yaml
        env:
          TYPE: ${{ secrets.TYPE || '1' }}
        run: |
          echo "Setting environment variables from YAML"
          HOSTS=$(cat .github/environments.yaml | jq -r '.environments[] | select(.type == '${{ env.TYPE }}) | .aem_hosts | to_entries[] | "\(.key):\(.value)"')
          echo "Available hosts for TYPE ${TYPE}:"
          echo "${HOSTS}"
          echo "${HOSTS}" > hosts_list.txt
          echo "HOSTS=${HOSTS}" >> $GITHUB_ENV

      - name: Select server for deployment
        env:
          HOSTS: ${{ env.HOSTS }}
        run: |
          echo "Please select the server to deploy to from the following list:"
          echo "${HOSTS}"
          echo "Assuming pre-defined server selection for automation purposes..."
          # Simulating selection, you need to replace this with an actual input method if available
          SELECTED_SERVER=$(echo "${HOSTS}" | head -n 1 | cut -d ':' -f 2)  # Assuming the first server for demonstration
          echo "SELECTED_SERVER=${SELECTED_SERVER}" >> $GITHUB_ENV

      - name: Confirm deployment
        env:
          SELECTED_SERVER: ${{ env.SELECTED_SERVER }}
        run: |
          echo "You have selected to deploy to ${SELECTED_SERVER}. Please confirm (yes/no):"
          echo "Assuming confirmation for automation purposes..."
          CONFIRMATION="yes"  # You can change this as needed for actual confirmation
          if [ "${CONFIRMATION}" != "yes" ]; then
            echo "Deployment aborted by user."
            exit 1
          fi
          echo "Deployment confirmed to ${SELECTED_SERVER}."

      - name: Upload AEM package (using environment variables)
        run: |
          curl -u ${{ secrets.AEM_CREDENTIALS }} \
            -F cmd=upload \
            -F force=true \
            -F package=@${{ env.AEM_PACKAGE_NAME }} \
            http://${{ env.SELECTED_SERVER }}/crx/packmgr/service/.json
